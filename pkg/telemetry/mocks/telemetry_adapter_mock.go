// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/telemetry/telemetryAdapter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	trace "go.opentelemetry.io/otel/trace"
)

// MockITelemetryAdapter is a mock of ITelemetryAdapter interface.
type MockITelemetryAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockITelemetryAdapterMockRecorder
}

// MockITelemetryAdapterMockRecorder is the mock recorder for MockITelemetryAdapter.
type MockITelemetryAdapterMockRecorder struct {
	mock *MockITelemetryAdapter
}

// NewMockITelemetryAdapter creates a new mock instance.
func NewMockITelemetryAdapter(ctrl *gomock.Controller) *MockITelemetryAdapter {
	mock := &MockITelemetryAdapter{ctrl: ctrl}
	mock.recorder = &MockITelemetryAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITelemetryAdapter) EXPECT() *MockITelemetryAdapterMockRecorder {
	return m.recorder
}

// GenerateOperationID mocks base method.
func (m *MockITelemetryAdapter) GenerateOperationID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateOperationID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateOperationID indicates an expected call of GenerateOperationID.
func (mr *MockITelemetryAdapterMockRecorder) GenerateOperationID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateOperationID", reflect.TypeOf((*MockITelemetryAdapter)(nil).GenerateOperationID))
}

// GetOperationIDFromContext mocks base method.
func (m *MockITelemetryAdapter) GetOperationIDFromContext(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationIDFromContext", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOperationIDFromContext indicates an expected call of GetOperationIDFromContext.
func (mr *MockITelemetryAdapterMockRecorder) GetOperationIDFromContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationIDFromContext", reflect.TypeOf((*MockITelemetryAdapter)(nil).GetOperationIDFromContext), ctx)
}

// StartRequestSpan mocks base method.
func (m *MockITelemetryAdapter) StartRequestSpan(ctx context.Context, operationName string, properties map[string]string) (context.Context, trace.Span, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRequestSpan", ctx, operationName, properties)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(trace.Span)
	ret2, _ := ret[2].(func())
	return ret0, ret1, ret2
}

// StartRequestSpan indicates an expected call of StartRequestSpan.
func (mr *MockITelemetryAdapterMockRecorder) StartRequestSpan(ctx, operationName, properties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRequestSpan", reflect.TypeOf((*MockITelemetryAdapter)(nil).StartRequestSpan), ctx, operationName, properties)
}

// TrackError mocks base method.
func (m *MockITelemetryAdapter) TrackError(err error, properties map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackError", err, properties)
}

// TrackError indicates an expected call of TrackError.
func (mr *MockITelemetryAdapterMockRecorder) TrackError(err, properties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackError", reflect.TypeOf((*MockITelemetryAdapter)(nil).TrackError), err, properties)
}

// TrackEvent mocks base method.
func (m *MockITelemetryAdapter) TrackEvent(ctx context.Context, eventName string, properties map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackEvent", ctx, eventName, properties)
}

// TrackEvent indicates an expected call of TrackEvent.
func (mr *MockITelemetryAdapterMockRecorder) TrackEvent(ctx, eventName, properties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackEvent", reflect.TypeOf((*MockITelemetryAdapter)(nil).TrackEvent), ctx, eventName, properties)
}
