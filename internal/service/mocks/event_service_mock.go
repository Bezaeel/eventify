// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/event_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "eventify/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIEventService is a mock of IEventService interface.
type MockIEventService struct {
	ctrl     *gomock.Controller
	recorder *MockIEventServiceMockRecorder
}

// MockIEventServiceMockRecorder is the mock recorder for MockIEventService.
type MockIEventServiceMockRecorder struct {
	mock *MockIEventService
}

// NewMockIEventService creates a new mock instance.
func NewMockIEventService(ctrl *gomock.Controller) *MockIEventService {
	mock := &MockIEventService{ctrl: ctrl}
	mock.recorder = &MockIEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEventService) EXPECT() *MockIEventServiceMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockIEventService) CreateEvent(event *domain.Event, ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", event, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockIEventServiceMockRecorder) CreateEvent(event, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockIEventService)(nil).CreateEvent), event, ctx)
}

// DeleteEvent mocks base method.
func (m *MockIEventService) DeleteEvent(id uuid.UUID, ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", id, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockIEventServiceMockRecorder) DeleteEvent(id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockIEventService)(nil).DeleteEvent), id, ctx)
}

// Get2AllEvents mocks base method.
func (m *MockIEventService) Get2AllEvents(ctx context.Context) []domain.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get2AllEvents", ctx)
	ret0, _ := ret[0].([]domain.Event)
	return ret0
}

// Get2AllEvents indicates an expected call of Get2AllEvents.
func (mr *MockIEventServiceMockRecorder) Get2AllEvents(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get2AllEvents", reflect.TypeOf((*MockIEventService)(nil).Get2AllEvents), ctx)
}

// GetAllEvents mocks base method.
func (m *MockIEventService) GetAllEvents(ctx context.Context) []domain.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEvents", ctx)
	ret0, _ := ret[0].([]domain.Event)
	return ret0
}

// GetAllEvents indicates an expected call of GetAllEvents.
func (mr *MockIEventServiceMockRecorder) GetAllEvents(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEvents", reflect.TypeOf((*MockIEventService)(nil).GetAllEvents), ctx)
}

// GetEventById mocks base method.
func (m *MockIEventService) GetEventById(id uuid.UUID, ctx context.Context) *domain.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventById", id, ctx)
	ret0, _ := ret[0].(*domain.Event)
	return ret0
}

// GetEventById indicates an expected call of GetEventById.
func (mr *MockIEventServiceMockRecorder) GetEventById(id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventById", reflect.TypeOf((*MockIEventService)(nil).GetEventById), id, ctx)
}

// UpdateEvent mocks base method.
func (m *MockIEventService) UpdateEvent(event *domain.Event, ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", event, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockIEventServiceMockRecorder) UpdateEvent(event, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockIEventService)(nil).UpdateEvent), event, ctx)
}
